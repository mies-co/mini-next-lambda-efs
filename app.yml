AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Example minimal serverless app

Parameters:
    deployProcessName:
        Type: String
    deployBucketName:
        Type: String
    fileZip:
        Type: String
        Default: pack.zip
    fileHandler:
        Type: String
        Default: expressOnly
    xAppName:
        Type: String
    xHost:
        Type: String
        Default: demo
    xVersion:
        Type: String
        Default: latest

Resources:
    IamRoleLambdaExecution:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Action:
                          - "sts:AssumeRole"
                      Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
            Path: "/"
            Policies:
                - PolicyName: !Sub
                      - "${deployProcessNameRef}-lambda"
                      - { deployProcessNameRef: !Ref deployProcessName }
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                                - "lambda:InvokeFunction"
                            Effect: "Allow"
                            Resource:
                                "*"
                                # !Sub
                                #   - 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${deployProcessNameRef}*:*'
                                #   - { deployProcessNameRef: !Ref deployProcessName }
            RoleName: !Sub
                - "${deployProcessNameRef}-${AWS::Region}-lambdaRole"
                - { deployProcessNameRef: !Ref deployProcessName }

    LambdaApp:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri:
                Bucket: !Ref deployBucketName
                Key: !Sub "${xVersion}/${fileZip}"
            Environment:
                Variables:
                    NODE_ENV: production
                    X_HOST: !Ref xHost
            Events:
                ProxyApiRoot:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGatewayApp
                        Path: /
                        Method: ANY
                ProxyApiGreedy:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGatewayApp
                        Path: /{proxy+}
                        Method: ANY
            FunctionName: !Sub
                - "app-${xAppNameRef}"
                - { xAppNameRef: !Ref xAppName }
            Handler: !Sub "${fileHandler}.handler"
            MemorySize: 1024
            Role: !GetAtt IamRoleLambdaExecution.Arn
            Runtime: "nodejs12.x"
            Timeout: 6

    ApiGatewayApp:
        Type: AWS::Serverless::Api
        Properties:
            StageName: !Ref xVersion
