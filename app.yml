AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Example minimal serverless app

Parameters:
    deployProcessName:
        Type: String
    deployBucketName:
        Type: String
    fileZip:
        Type: String
        Default: pack.zip
    fileHandler:
        Type: String
        Default: expressOnly
    xAppName:
        Type: String
    xHost:
        Type: String
        Default: demo
    xAppVersion:
        Type: String
        Default: latest
    xTestFile:
        Type: String
        Default: latest
    xMountPath:
        Default: "/mnt/efs0"
        Description: File system mount path
        Type: String
    ec2efsProcessName:
        Default: datasync-ec2-efs
        Description: VPC and file system stack name
        Type: String

Resources:
    # Let's create the endpoint from within this CF template instead of the one that creates EFS.
    # So it remains flexible after EC2 and EFS have been created.
    AccessPoint:
        Type: AWS::EFS::AccessPoint
        Properties:
            FileSystemId:
                Fn::ImportValue: !Sub "${ec2efsProcessName}-FileSystemID"
            PosixUser:
                Uid: "1001"
                Gid: "1001"
            RootDirectory:
                CreationInfo:
                    OwnerGid: "1001"
                    OwnerUid: "1001"
                    Permissions: "755"
                # Enables the Lambda function to access the root of this EFS file system
                # So the Lambda function will be able to access /mnt/efs0 -> mapped to the dir -> /myEFSvolume
                Path: "/"
    IamRoleLambdaExecution:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Action:
                          - "sts:AssumeRole"
                      Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
            Path: "/"
            Policies:
                - PolicyName: !Sub
                      - "${deployProcessNameRef}-lambda"
                      - { deployProcessNameRef: !Ref deployProcessName }
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                                - "lambda:InvokeFunction"
                                - "ec2:DescribeNetworkInterfaces"
                                - "ec2:CreateNetworkInterface"
                                - "ec2:DeleteNetworkInterface"
                                - "ec2:DescribeInstances"
                                - "ec2:AttachNetworkInterface"
                            Effect: "Allow"
                            Resource: "*"
            RoleName: !Sub
                - "${deployProcessNameRef}-${AWS::Region}-lambdaRole"
                - { deployProcessNameRef: !Ref deployProcessName }

    LambdaApp:
        Type: AWS::Serverless::Function
        Properties:
            Description: !Sub "The main function of ${xAppName)"
            CodeUri:
                Bucket: !Ref deployBucketName
                Key: !Sub "${xAppVersion}/${fileZip}"
            Environment:
                Variables:
                    NODE_ENV: production
                    X_HOST: !Ref xHost
                    X_TEST_FILE: !Ref xTestFile
                    # Enables us to use `const dir = process.env.X_MOUNT_PATH` inside our app
                    X_MOUNT_PATH: !Ref xMountPath
            Events:
                ProxyApiRoot:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGatewayApp
                        Path: /
                        Method: ANY
                ProxyApiGreedy:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGatewayApp
                        Path: /{proxy+}
                        Method: ANY
            FunctionName: !Sub
                - "app-${xAppNameRef}"
                - { xAppNameRef: !Ref xAppName }
            FileSystemConfigs:
                - LocalMountPath: !Ref xMountPath
                  Arn: !GetAtt AccessPoint.Arn
            Handler: !Sub "${fileHandler}.handler"
            VpcConfig:
                SecurityGroupIds:
                    - Fn::ImportValue: !Sub "${ec2efsProcessName}-MountTargetSecurityGroup"
                SubnetIds:
                    - Fn::ImportValue: !Sub "${ec2efsProcessName}-SubnetID"
            MemorySize: 1024
            Role: !GetAtt IamRoleLambdaExecution.Arn
            Runtime: "nodejs12.x"
            Timeout: 6
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonElasticFileSystemClientReadWriteAccess
                - AWSXRayDaemonWriteAccess

    ApiGatewayApp:
        Type: AWS::Serverless::Api
        Properties:
            StageName: !Ref xAppVersion
